name: CD

on:
  push:
    # tags:
    #   - "v*.*.*"

jobs:
  publish:
    name: Publishing for ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        rust: [stable]
        job:
          - os: macos-11
            artifact_prefix: macos
            target: x86_64-apple-darwin
            binary_postfix: ""
          - os: ubuntu-20.04
            artifact_prefix: linux
            target: x86_64-unknown-linux-gnu
            binary_postfix: ""
          - os: ubuntu-20.04
            artifact_prefix: linux
            target: aarch64-unknown-linux-gnu
            binary_postfix: ""
            use_cross: true
          - os: windows-2019
            artifact_prefix: windows
            target: x86_64-pc-windows-msvc
            binary_postfix: ".exe"

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - uses: Swatinem/rust-cache@v1

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V
          rustc --print=cfg

      - name: Install needed Windows dependencies
        if: startsWith(matrix.job.os, 'windows-')
        shell: pwsh
        run: |
          Invoke-WebRequest https://go.microsoft.com/fwlink/p/?LinkId=2124703 -OutFile installwebview.exe -UseBasicParsing
          cmd /C start /wait installwebview.exe /silent /install

      - name: Install needed Ubuntu dependencies
        if: startsWith(matrix.job.os, 'ubuntu-') && !matrix.job.use_cross
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0 libgtksourceview-3.0-dev libappindicator3-dev

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          toolchain: ${{ matrix.rust }}
          use-cross: ${{ matrix.job.use_cross }}
          args: --release --target ${{ matrix.job.target }}

      - name: Package final binary
        shell: bash
        run: |
          cd target/${{ matrix.job.target }}/release

          BINARY_NAME=tesla_auth${{ matrix.job.binary_postfix }}
          strip $BINARY_NAME

          RELEASE_NAME=tesla-auth-${{ matrix.job.artifact_prefix }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME

          if [[ ${{ runner.os }} == 'Windows' ]]; then
            certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          else
            shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          fi

      # - name: Release assets
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: |
      #       target/${{ matrix.job.target }}/release/tesla-auth-${{ matrix.job.artifact_prefix }}.tar.gz
      #       target/${{ matrix.job.target }}/release/tesla-auth-${{ matrix.job.artifact_prefix }}.sha256
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
